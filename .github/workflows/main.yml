on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ testbranch ]
#   pull_request:
#     branches: [ master ]
#   schedule:
#     - cron: '0/4    ' # Runs after every 4 mins.

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  pull_request_target:
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

  testing:
    runs-on: ubuntu-latest
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout test
        id: chktestbranch
        uses: actions/checkout@v2
        with:
          ref: testbranch
      - name: Setup Python
        id: setuppython
        uses: actions/setup-python@v2
        with:
         python-version: '3.8'
      - name: dbt-run
        id: dbtrun
        uses: mwhitaker/dbt-action@v0.1.3
        with:
          dbt_command: "dbt run --profiles-dir ./"
        env:
          DBT_BIGQUERY_TOKEN: ${{ secrets.DBT_BIGQUERY_TOKEN }}
      - name: dbt-test
        id: dbttest
        uses: mwhitaker/dbt-action@v0.1.3
        with:
          dbt_command: "dbt test --profiles-dir ./"
        env:
          DBT_BIGQUERY_TOKEN: ${{ secrets.DBT_BIGQUERY_TOKEN }}
      - name: Merge branch if test is successful
        if: success()
        run: git fetch --all
      - name: Merge branch if test is successful
        if: success()
        run: git checkout master
      - name: Merge branch if test is successful
        if: success()
        run: git checkout testbranch
      - name: Merge branch if test is successful
        if: success()
        run: git config user.email "kulkarniva98@gmail.com"
      - name: Merge branch if test is successful
        if: success()
        run: git config user.name "vaibhavk98"
      - name: Merge branch if test is successful
        if: success()
        run: git merge --no-ff -s recursive -X subtree=TESTDATA master --allow-unrelated-histories
      - name: Merge branch if test is successful
        if: failure()
        run: git add .
      - name: Merge branch if test is successful
        if: failure()
        run: git commit -m "master commit"
      - name: Merge branch if test is successful
        if: failure()
        run: git merge --no-ff -s recursive -X subtree=TESTDATA master --allow-unrelated-histories
